# -*- coding: utf-8 -*-
"""exam06_classifiaction_iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LGxh05YfW_9dvLXkEUPEf-qTMAYWKlmo
"""

import numpy as np
import matplotlib.pyplot as plt 
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from sklearn.datasets import load_iris
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split

"""강사님 코드 : https://colab.research.google.com/drive/18otIVLJ0e9mM3yWAVun6e96GwNV06W4J?usp=sharing

"""



iris = load_iris()
print(type(iris))
print('========== data shape =========')
print('Data', iris.data.shape)
print('Label', iris.target.shape)
print('First five data :', iris.data[50:55])
print('First five label :' , iris.target[50:55])
print('iris dataset keys\n', iris.keys())

print(iris.target_names)
print(iris.feature_names)

x = iris.data
y = iris.target.reshape(-1,1) #차원을 늘려줌 [00000] [[0][0][0][0][0]] / 원핫 인코딩하려고
print(y[0:5])

encoder = OneHotEncoder(sparse=False) #100 010 001 좌표 형태로 보여줌
encoded_y = encoder.fit_transform(y)
print(encoded_y.shape)
print(encoded_y[:5])

X_train, X_test, Y_train, Y_test = train_test_split(x, encoded_y, test_size=0.2)
print(X_train.shape, Y_train.shape)
print(X_test.shape, Y_test.shape)

model = Sequential()
model.add(Dense(256, input_dim = 4, activation='relu'))
model.add(Dense(128,activation='relu'))
model.add(Dense(512,activation='relu'))
model.add(Dense(3, activation='softmax')) #다중분류기

opt = Adam(lr=0.001)
model.compile(opt, loss = 'categorical_crossentropy', metrics=['accuracy'])
print(model.summary())

history = model.fit(X_train, Y_train, batch_size=5, epochs=5, verbose=1)

score = model.evaluate(X_test, Y_test, verbose=0)
print('Final test set accuracy :', score[1])

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.show()

labels = iris.target_names
my_sample = np.random.randint(30)
sample = X_test[my_sample]
sample = sample.reshape(1,4) #차원 하나 늘려줌 / 리스트 추가 []에서 [[]]이렇게 들어감
pred = model.predict(sample)
print(pred)
print(Y_test[my_sample])
print('Target :', labels[np.argmax(Y_test[my_sample])])
print('Predction after learning is ', labels[np.argmax(pred)])



