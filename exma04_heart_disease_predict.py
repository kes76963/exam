# -*- coding: utf-8 -*-
"""exma04_heart_disease_predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17BlpDCYO0qbDpUl1ZeLg6cqzBZ9YQ-P1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

column_name = ['age','sex','cp','treshbps','chol','fbs','restecg','thalach',
               'exang','oldpeak','slope','ca','hsl','HeartDisease']
raw_data = pd.read_excel('/content/datasets/heart-disease.xlsx',header=None, names = column_name)          
print(raw_data.head(20))

print(raw_data.describe())

print(raw_data.info())

clean_data = raw_data.replace('?',np.nan)
clean_data = clean_data.dropna() # 결측치가 너무 많아지면 컬럼을 drop
print(clean_data.info())

keep = column_name.pop() # 맨 마지막 컬럼을 뽑아내서 없앤다.
print(keep)
print(column_name)

training_data = pd.DataFrame(clean_data.iloc[:,0:13], columns= column_name)  #앞에는 모든 열, 
target = pd.DataFrame(clean_data.iloc[:,13],columns=[keep])
print(training_data.head())
print(target.head())

print(target['HeartDisease'].sum())

print(target['HeartDisease'].mean()) #너무 값이 치중되어있으면 안되기 때문에 스케일링 작업을 해야 함

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_data = scaler.fit_transform(training_data)
scaled_data = pd.DataFrame(scaled_data, columns= column_name)
print(scaled_data.head())

print(scaled_data.describe().T) #.T를 쓰면 행과 열이 바뀜

#과적합이 있는지 확인
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(scaled_data, target, test_size = 0.3)
print('X_train shape :', X_train.shape)
print('Y_train shape :', Y_train.shape)
print('X_test shape :', X_test.shape)
print('Y_test shape :', Y_test.shape)

model = Sequential()
model.add(Dense(512,input_dim=13, activation= 'relu')) # 13 x 512(weight 개수) + 512(bias) = 파라미터
model.add(Dense(256, activation='relu')) 
model.add(Dense(128, activation= 'relu'))
model.add(Dense(1, activation='sigmoid'))
print(model.summary())

model.compile(loss='mse',optimizer='adam', metrics=['binary_accuracy'])
fit_hist = model.fit(X_train, Y_train,batch_size=50, epochs =50, validation_split=0.2) #배치 사이즈

plt.plot(fit_hist.history['binary_accuracy'])
plt.plot(fit_hist.history['val_binary_accuracy'])
plt.show()

score = model.evaluate(X_test, Y_test, verbose=0) #학습 때 쓰지 않았던 데이터로 수행했을 때
print('Keras DNN model loss :',score[0])
print('Keras DNN model accuracy :',score[1])  # 과적합이 발생

#망각기능

model = Sequential()
model.add(Dense(512,input_dim=13, activation= 'relu'))
model.add(Dropout(0.5))  #하이퍼 파라미터
model.add(Dense(256, activation='relu')) 
model.add(Dropout(0.5))
model.add(Dense(128, activation= 'relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))
print(model.summary())

model.compile(loss='mse',optimizer='adam', metrics=['binary_accuracy'])
fit_hist = model.fit(X_train, Y_train,batch_size=50, epochs =100, validation_split=0.2) #배치 사이즈 
#verbose = 0 결과 노출 /verbose = 2 진행상황이 안 뜸 ===== 안 뜸

plt.plot(fit_hist.history['binary_accuracy'])
plt.plot(fit_hist.history['val_binary_accuracy'])
plt.show()

score = model.evaluate(X_test, Y_test, verbose=1) #학습 때 쓰지 않았던 데이터로 수행했을 때
print('Keras DNN model loss :',score[0])
print('Keras DNN model accuracy :',score[1]) # 계속 떨어지면 과적합

from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
pred = model.predict(X_test)
pred = (pred >0.5) #0.5보다 크면 1, 작으면 0 / sigmoid를 써서 값을 바꿔주기 위해서
print(confusion_matrix(Y_test, pred))
print(f1_score(Y_test,pred, average='micro'))

my_sample = np.random.randint(89) #0~88까지 랜덤 인덱싱하기 위해
sample_data = np.array(X_test.iloc[my_sample]) #if 10 나오면 10번째 뽑아서
sample_data = sample_data.reshape(-1,13)
print(model.predict(sample_data))
print(Y_test.iloc[my_sample])

"""https://colab.research.google.com/drive/1Vj_47SQ3gFhD-HxyiS7H8qeVhg6e8hcy?usp=sharing

"""