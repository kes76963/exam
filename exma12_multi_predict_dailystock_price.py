# -*- coding: utf-8 -*-
"""exma12_multi_predict_dailystock_price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18DZHsLP1IiN_usiNeS0psWmBAImi7_iw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from tensorflow.keras.optimizers import Adam



raw_data = pd.read_csv('/content/datasets/Samsung.csv')
print(raw_data.head())

# date 컬럼을 날짜 데이터로 변환
raw_data['Date'] = pd.to_datetime(raw_data['Date'])
raw_data.set_index('Date', inplace=True)

print(raw_data.head())

# 5개 칼럼만 사용
data = raw_data['2019-06-15':'2020-06-14'][['Open', 'High', 'Low', 'Close', 'Volume']]

print(data.head())
print(data.info())
print(data.shape)

data = data.dropna()
print(data.info())

from sklearn.preprocessing import MinMaxScaler
minmaxscaler = MinMaxScaler()
scaled_data = minmaxscaler.fit_transform(data)
print(scaled_data[:6])
print(scaled_data.shape)

sequence_X = []
sequence_Y = []
for i in range(len(scaled_data) - 28):
    _x = scaled_data[i:i+28]
    _y = scaled_data[i+28][3] #종가만 예측
    if i is 0:
        print(_x, '->', _y)
    sequence_X.append(_x)
    sequence_Y.append(_y)

sequence_X = np.array(sequence_X)
sequence_Y = np.array(sequence_Y)
print(sequence_X[0])
print(sequence_Y[0])
print(sequence_X.shape)
print(sequence_Y.shape)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(
    sequence_X, sequence_Y, test_size=0.2, random_state=77)
print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

model = Sequential()
model.add(LSTM(50,           #GRU 학습 효율이 좋음 /SimpleRNN
    input_shape=(X_train.shape[1],X_train.shape[2]),
    activation='tanh'))   #return_sequences = True (50 x 레이어) 곱하기 때문에 flatten
model.add(Flatten())
model.add(Dense(1))
model.compile(loss='mse', optimizer='adam')
model.summary()

fit_hist = model.fit(X_train, Y_train, epochs=500,
    validation_data=(X_test, Y_test), shuffle=False) #val data => 과적합 일어났는지 확인하려고 그래서 epochs 변화줌

plt.plot(fit_hist.history['loss'])
plt.plot(fit_hist.history['val_loss'])
plt.show()

predict = model.predict(X_test)

plt.plot(Y_test, label='actual')
plt.plot(predict, label='predict')
plt.legend()
plt.show()

# 5개 칼럼만 사용
test_data = raw_data['2021-04-15':'2021-06-14'][['Open', 'High', 'Low', 'Close', 'Volume']]

print(test_data.head())
print(test_data.info())
print(test_data.shape)

scaled_tdata = minmaxscaler.fit_transform(test_data)
print(scaled_tdata[:5])
print(scaled_tdata.shape)

scaled_tdata[30][3]

predict_value = minmaxscaler.inverse_transform(scaled_tdata[30].reshape(-1,5)) # inverse_Transform 원래의 값으로 돌려주는 함수
print(predict_value)

print(test_data.iloc[30])

sequence_t_X = []
sequence_t_Y = []
for i in range(len(scaled_tdata) -28):
  _x = scaled_tdata[i:i+28]
  _y = scaled_tdata[i+28][3]
  sequence_t_X.append(_x)
  sequence_t_Y.append(_y)

sequence_t_X = np.array(sequence_t_X)
sequence_t_Y = np.array(sequence_t_Y)

print(sequence_t_X.shape)
print(sequence_t_Y.shape)

predict = model.predict(sequence_t_X)

plt.plot(sequence_t_Y, label = 'acutal')
plt.plot(predict, label ='predict')
plt.legend()
plt.show()



