# -*- coding: utf-8 -*-
"""exam01_Introduction_to_machine_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QAnX5A5A2_mqB5KIM9_UhNMTwd1uY3CB

머신러닝 입문

linear regression
"""

#함수 방식
def celsius_to_fahrenheit(x):
  return x * 1.8 + 32

cel = int(input('섭씨온도를 입력하세요 :'))
print('화씨온도 :',celsius_to_fahrenheit(cel))

"""머신러닝 방식"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, InputLayer
import numpy as np
import matplotlib.pyplot as plt

data_C = np.array(range(0,100))
data_F = celsius_to_fahrenheit(data_C)
print(data_C)
print(data_F)

model = Sequential()
model.add(InputLayer(input_shape=(1,)))
model.add(Dense(1))
model.compile(loss='mse',optimizer ='rmsprop')
print(model.summary())

scaled_data_C = data_C / 100
scaled_data_F = data_F /100
print(scaled_data_C)
print(scaled_data_F)

model.predict([0.01])

model.save('before_learning.h5')

# 데이터가 많지 않기 때문에 epochs 값 크다
fit_hist = model.fit(scaled_data_C,scaled_data_F, epochs=1000)

### 0.01일 때 값 0.338 얼추 비슷
print(model.predict([0.01]))

model.save('after_learning.h5')

plt.plot(fit_hist.history['loss'])
plt.show()

"""### 잡음이 있는 실제 데이터"""

noise = np.array(np.random.normal(0, 0.05,100))
print(noise)

noised_scaled_data_F = np.array([])
for data in scaled_data_F:
  noised_scaled_data_F = np.append(noised_scaled_data_F, np.random.normal(0, 0.05, 100) + data
  )
print(noised_scaled_data_F)
print(len(noised_scaled_data_F))

noised_scaled_data_C =[]
for data in range(0,100):
  for i in range(0,100) :
    noised_scaled_data_C.append(data)
noised_scaled_data_C = np.array(noised_scaled_data_C)
noised_scaled_data_C = noised_scaled_data_C/100
print(noised_scaled_data_C)
print(len(noised_scaled_data_C))

plt.scatter(x=noised_scaled_data_C,y=noised_scaled_data_F)
plt.show()

fig = plt.figure(figsize=(50,50))
ax = fig.add_subplot(111)
ax.scatter(x=noised_scaled_data_C, y = noised_scaled_data_F, alpha =0.2,s=200,marker='+')
plt.show()

model2 = Sequential()
model2.add(InputLayer(input_shape=(1,)))
model2.add(Dense(1))
model2.compile(loss='mse',optimizer='rmsprop')
print(model2.summary())

print(model2.predict([0.01]))

fit_hist = model2.fit(noised_scaled_data_C, noised_scaled_data_F, epochs=20)

model2.save('noised_after_learning.h5')

plt.plot(fit_hist.history['loss'])
plt.show()

print(model2.predict([0.01]))